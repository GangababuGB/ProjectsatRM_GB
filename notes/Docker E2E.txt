Drug Classification Moel E2E.

https://towardsdatascience.com/a-full-end-to-end-deployment-of-a-machine-learning-algorithm-into-a-live-production-environment-3d9971ade188



https://github.com/EthicalML/awesome-production-machine-learning



docker-commands
https://awesomeopensource.com/project/emailtovamos/docker-commands?msclkid=3ae3123ebc8d11eca2c391738e100c77

docker-commands
Commands for docker, Dockerfile and docker-compose

Get current Docker version

docker --version

Once Dockerfile is ready, the command to build the image:

docker build -t <imagename>:tag .

Build Docker image with no cache. This is very important if you are making changes to the same file and Docker may think it hasn't changed. So it is always safe to use the following command to build Docker image when in doubt:

docker build --no-cache -t <imagename>:tag .

e.g.

docker build --no-cache -t emailtovamos/game-repo:v02 .

Retag a local image with a new image name and tag before pushing to dockerhub:

docker tag mylocalimage:1.0 myrepo/myimage:2.0

Pull a particular Docker image

docker pull <imageName>

If you want to push the image to registry of docker:

docker push <imageName>:tag

See all images:

docker images

Access a process running on docker (e.g. having the number: 1e91702267b7 ):

docker exec -it 1e91702267b7 sh

Get ip of docker machine:

docker-machine ip

Stop/Kill a container:

docker stop <containerId> docker kill <containerId>

Stop & Remove all containers:

docker stop $(docker ps -a -q) docker rm $(docker ps -a -q)

docker-compose start

docker-compose up

docker-compose stop everything

docker-compose down

ssh into a running container

docker exec -it <containerId> bash

login to your docker-hub

docker login

logout of docker-hub

docker logout

Delete image from local storge:

docker rmi <imageName>

List networks:

docker network ls

Run a container from the Alpine version 3.9 image, name the running container “web” and expose port 5000 externally, mapped to port 80 inside the container:

docker container run --name web -p 5000:80 alpine:3.9

Print the last 100 lines of a container’s logs:

docker container logs --tail 100 web

Stop a running container through SIGTERM:

docker container stop web

Stop a running container through SIGKILL:

docker container kill web


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Git Bash commands or git commands

https://www.linkedin.com/pulse/git-bash-commands-karra-sankar?msclkid=73e92e5dbc8d11ecb5b6d0b4a4d38007


https://gist.github.com/etoxin/1acb257550b1de60fe99?msclkid=73e8986dbc8d11eca2814cf6e9cb2a90



search (regex)
git grep "regex"
list all branches
git branch -a
list remote branches
git branch -r
checkout a branch on remote
make sure you don't use origin

git fetch
git checkout branchName
Create a new branch
first create a branch

git checkout -b <branchName>
Create a new branch from an existing branch

git checkout origin/branchName -b newBranchName
Then push your new branch to the repo

git push origin <branchName>
Create a branch from a commit
AKA Recover a deleted branch

git checkout -b <branch> <sha>
revert all changes in a branch. Removes staged and working directory changes.
git reset --hard
Resets index to former commit; replace 56e05fced with your commit code. You can use git log to get commit code
git reset 56e05fced
revert a file to the most recent commit
git checkout HEAD -- /somePath/file.txt
to discard changes in working directory
git checkout -- <file>
Checkout a file from another branch
git checkout origin/branchName  -- fileName.txt
undo the last commit. Blow it out of the water.
git reset --hard HEAD~1
undo your last commit but leave the files from that commit staged.
git reset --soft HEAD~1
delete local (untracked) files
git clean -f
If you want to also remove directories, run
git clean -f -d
clean a folder
git clean -fxd {dir_path}
commit a folder/file without staging it.
git commit /folderToCommit -m 'commit msg'
list all branches (remote & local/remote only)
git branch -a
git branch -r
Find out all branches a commit is on
git branch --contains <commit>
display log with Tree
git log --pretty=format:"%h - %cr (%an) %s" --graph
Merge Master into your local branch
git fetch
git merge origin/master
a shortcut to this is. They are both the same

git pull origin master
or, if it's a busy repo.

git pull --rebase <remote name> <branch name>
list conflicts
git diff --name-only --diff-filter=U
grep -lr '<<<<<<<' .
Diff a conflict
git mergetool -t opendiff
pull a branch , merge if conflicted use remote.
git pull -s recursive -X theirs origin ra
show log with merged files
git log -m -1 --name-only
Show the changes between two branches.
git diff --name-status master..branchName > changelog.txt
Recover a deleted branch
Get the SHA of the last commit on the branch.

git checkout -b newbranchname 56e05fced
Stashes
save a stash
git stash save "My changes."
list your saved stashes
git stash list
apply a stash (Where stash@{1} is the stash you want to apply.)
git stash apply stash@{1}
delete a branch on origin
git push origin --delete <branchName>
delete a branch locally
git branch -d <branchName>
Get all commits from a branch. For a release log, changelog etc.
git cherry -v develop mybranch
Revert a commit that is origin/remote
This reverts the commit with a new commit.

First get the commit sha.

git revert -m 1 <commit-hash> 
git commit -m "Reverting the last commit which messed the repo."
git push -u origin master
Utilities
Get the status on all repos in a folder
find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git status -s && echo)' \;
Save the results to a file.

find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git status -s && echo)' \; > gitreport.txt
Delete all local branches that don't exist on origin
run git fetch -p this removes the remote references.

run git branch -vv

then run the following script

git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done
keywords: prune



___________________+++++++++++++++++++++++++++++++________________________________________________


Git Bash commands or git commands:

1. git --version

   To know the version of Git.

2. git init

   To create a Local repository

    Initialized empty Git repository in ..../RepositoryName/.git/

3. git bash.exe 

    It is like git cmd(Command Prompt)

4. git status

   To know unstaged/Untracked files/ Workspace files/ Staged files/Modified files

5. git add app1.txt

   Used to add individual files in Stage Area

6. git add . 

   Here . dot means all files.

   Used to add all files in Stage Area.

7. git rm --cached -r . --cached

    Remove files in Staged Area to keep in Workspace.

8. git rm --cached one.txt

    Remove file in Staged Area to keep in Workspace.

9. git commit -m "your message"

     Here -m is a message

     Commit selected files into Local Repository.

10. git config --global user.email " Your Email"

     Your Git Credentials(these Details Stored in control panel>Users and Accounts> credential Manager>Windows Credentials)

11. git config --global user.name " Your User Name"

     Your Git Credentials(these Details Stored in control panel>Users and Accounts> credential Manager>Windows Credentials)

12. git remote add origin https://github.com/UserName/RepositoryName.git

     Create Remote Repository add above.

13. git push -u origin main

     Local Repository files Stored in a remote repository.

     Send files from Local Repository to Remote Repository.

 14. git push 

     Second push onwards use like git push

     Send files from Local Repository to Remote Repository.

15. git pull

     Fetch files from Remote to Local Repository.

16. git restore one.txt

     Here one.txt is a file name with an extension used to Undo/Remove Modifications in files.

     To cancel workspace file changes or to avoid changes.

17 git commit 

      For long String commit message then appears terminal press I for insert mode enter commit message :wq for saving and exit press Esc.

18. git pull origin main

The first-time git pull origin main<branch name> used to retrieve files from Remote repository to Local Repository+Workspace folder.

19. git checkout

Used for check out any branch up to date or not.

or Changing from one branch to another branch.

20. git diff

 To see files modified code or

changes made on a file or

To check the changes in the working area and the staged area.

21. git diff --staged

To see files modified code or

changes made on a file or

Displays the differences between files in two commits or

To check the changes in the staged area and the Local repository area.

22. git diff head

To see files modified code or

changes made on a file or

Displays the differences between files in two commits or

To check the changes in the working area and the Local repository area.

Note History in remote repository to see modifications in files every commit and history used to compare first commit and second commit.

23. cls clear the cmd command line

24. git branch

Note Point: branch-related all commands work after adding remote URL in the local repository.

To see the correct working branch name green color or To see the all available branches black color.

25. git branch branch_name

Used to create a new branch

26. git checkout branch_name

Switch to branch branch_name

27. git checkout -b branch_name

To create a new branch, switch to that new branch.

28. git switch branch_name

Switch to branch branch_name

29. git switch -c branch_name

To create a new branch, switch to that new branch.

30. Caused because of: git pull origin master

The first-time git pull origin main<branch name> used to retrieve files from Remote repository to Local Repository+Workspace folder.

Error: refusing to merge unrelated histories

Solution: git pull origin master --allow-unrelated-histories
31. how to Git copy changes from one branch to another
git checkout BranchB
git merge BranchA
git push origin BranchB
32. git branch -d Branch_Name

Used to delete an already existing branch in Local Repository.

33. git log

To see all commit messages with commit id's.

--------------THE END--------------